openapi: 3.0.3
info:
  title: Developed Market API
  version: 1.0.0
  description: "Developed Market API é uma API RESTFul desenvolvida em \n    pyhton,\
    \ com django, cujo principal objetivo é sustentar a plataforma de \n    e-commerce,\
    \ com mesmo nome. Possuindo três níveis de acesso e permissão \n    (Admin, Seller\
    \ e Client), a aplicação permite criar e atualizar usuários,\n    criar produtos\
    \ e movimentar seu estoque, adicionar produtos a um carrinho\n    de compras e\
    \ realizar pedidos. Também é possivel listar pedidos realizados\n    ou vendidos\
    \ e gerar relatórios de vendas em pdf. "
paths:
  /api/address/{id}/:
    patch:
      operationId: api_address_partial_update
      description: |-
        Atualiza um endereço, a partir do seu id
            informado nos parâmetros da rota.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
  /api/address/users/{user_id}/:
    post:
      operationId: api_address_users_create
      description: |-
        Cria um endereço para um usuário, o qual
             teve seu id informado nos parâmetros da rota.
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Address'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
  /api/carts/{cart_id}/:
    get:
      operationId: api_carts_list
      description: "Lista os produtos presentes no carrinho de compras, a partir do\
        \ id,\n    do carrinho, informado no parâmetro da rota. O usuário logado precisa\
        \ ser admin\n    ou dono do carrinho de compras.\n    "
      parameters:
      - in: path
        name: cart_id
        schema:
          type: string
          format: uuid
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Carts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCartRetrieveList'
              examples:
                ExampleListCart:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?page=4
                    previous: http://api.example.org/accounts/?page=2
                    results:
                    - id: fbf8e423-e82a-4f44-a82d-493873ce6a63
                      total_value_cart: 159.9
                      cart_list:
                      - quantity: 2
                        total_product: 24.36
                        product:
                          id: b7f3f2ec-0c9b-4200-b650-6c02775845db
                          name: teste2
                          description: testestestestestes
                          price: '12.18'
                          brand: teste
                          category: Others
                          seller_id: 513a656c-9f96-4847-9cb1-5aa3ff534996
                      - quantity: 3
                        total_product: 135.54
                        product:
                          id: a359a2dd-2c80-44a8-9921-1361032d794d
                          name: teste3
                          description: testestestestestes
                          price: '45.18'
                          brand: teste
                          category: Others
                          seller_id: 513a656c-9f96-4847-9cb1-5aa3ff534996
                  summary: List Cart
          description: ''
  /api/carts/{cart_id}/orders/:
    post:
      operationId: api_carts_orders_create
      description: "Cria o pedido de compra, baseado no carrinho de compras do usuário,\n\
        \    a partir do id do carrinho, informado no parâmetro da rota. O usuário\
        \ logado \n    precisa ser admin ou dono do carrinho de compras.\n    "
      parameters:
      - in: path
        name: cart_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Carts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseOrdersCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PurchaseOrdersCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PurchaseOrdersCreate'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrdersCreate'
              examples:
                ExampleCreateOrder:
                  value:
                    orders:
                    - id: f9cb24c1-0ef5-472e-adad-082b27248908
                      status: Em Andamento
                      price: 1700.0
                      quantity_items: 2
                      client_id: 53823c8d-c5cc-4311-a4dc-0586e930ae5a
                      seller_id: 797c2e48-b070-42ca-ad95-c686b84a44c8
                      created_at: '2023-05-06T14:52:42.775926Z'
                      updated_at: '2023-05-06T14:52:42.775948Z'
                      products:
                      - id: 57d1fe59-c647-483c-85c1-8d8162e6ddff
                        name: Produto Ruim
                        description: testestestestestes
                        price: '850.00'
                        brand: Marca Ruim
                        seller_id: 797c2e48-b070-42ca-ad95-c686b84a44c8
                    - id: 2fcf2d63-a33a-4b41-90fc-88e4906150e8
                      status: Em Andamento
                      price: 198.0
                      quantity_items: 2
                      client_id: 53823c8d-c5cc-4311-a4dc-0586e930ae5a
                      seller_id: 50e4b827-bb03-416c-9b92-890273403d9a
                      created_at: '2023-05-06T14:52:43.731255Z'
                      updated_at: '2023-05-06T14:52:43.731282Z'
                      products:
                      - id: 64f3f929-1416-4f06-ac24-259126d8e794
                        name: Shorts Jeans
                        description: Summer-essential cutoffs
                        price: '99.00'
                        brand: Denim
                        seller_id: 50e4b827-bb03-416c-9b92-890273403d9a
                  summary: Create Order
          description: ''
  /api/carts/{cart_id}/products/:
    post:
      operationId: api_carts_products_create
      description: "Adiciona um produto ao carrinho de compras, a partir do id,\n\
        \    do carrinho, informado no parâmetro da rota. O id do produto é enviado\
        \ no\n    body, assim como a quantidade do mesmo. O usuário logado precisa\
        \ ser admin\n    ou dono do carrinho de compras.\n    "
      parameters:
      - in: path
        name: cart_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Carts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartListProducts'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartListProducts'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartListProducts'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartListProducts'
          description: ''
  /api/carts/{id}/product/{product_id}/:
    delete:
      operationId: api_carts_product_destroy
      description: "Remove um produto do carrinho de compras, a partir do id,\n  \
        \  do carrinho e do id do produto, informados nos parâmetros da rota.\n  \
        \   O usuário logado precisa ser admin ou dono do carrinho de compras.\n \
        \   "
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: product_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Carts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/login/:
    post:
      operationId: api_login_create
      description: "Utiliza das credencias do usuário (username e password),\n   \
        \ para realizar autenticação e retorna dois tokens, um de acesso e outro de\
        \ \n    atualização."
      tags:
      - Autenticação
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomJWT'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomJWT'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomJWT'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomJWT'
          description: ''
  /api/orders/{id}/seller/:
    get:
      operationId: api_orders_seller_retrieve
      description: "Lista um pedido vendido por um vendedor,\n    a partir do id do\
        \ pedido, informado no parâmetro da rota. \n    O usuário logado precisa ser\
        \ admin ou dono das informações.\n    "
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Orders
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrdersUpdate'
          description: ''
    patch:
      operationId: api_orders_seller_partial_update
      description: "Atualizar o status de um pedido vendido por um vendedor,\n   \
        \ a partir do id do pedido, informado no parâmetro da rota. \n    O usuário\
        \ logado precisa ser admin ou dono das informações.\n    "
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPurchaseOrdersUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPurchaseOrdersUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPurchaseOrdersUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrdersUpdate'
          description: ''
  /api/orders/client/{user_id}/:
    get:
      operationId: api_orders_client_list
      description: "Lista os pedidos realizados por um cliente,\n    a partir do id\
        \ do usuário, informado no parâmetro da rota. O usuário logado \n    precisa\
        \ ser admin ou dono das informações.\n    "
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Orders
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPurchaseOrdersListClientList'
          description: ''
  /api/orders/sales-summary/seller/{id}/:
    get:
      operationId: api_orders_sales_summary_seller_retrieve
      description: "Gera um pdf, contendo o resumo de vendas, do vendedor,\n    a\
        \ partir do id do vendedor, informado no parâmetro da rota. \n    O usuário\
        \ logado precisa ser admin ou dono das informações.\n    "
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Orders
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Arquivo PDF com o resumo das vendas.
                content:
                  application/pdf:
                    schema:
                      type: string
                      format: binary
          description: ''
  /api/orders/seller/{user_id}/:
    get:
      operationId: api_orders_seller_list
      description: "Lista os pedidos vendidos por um vendedor,\n    a partir do id\
        \ do usuário, informado no parâmetro da rota. \n    O usuário logado precisa\
        \ ser admin ou dono das informações.\n    "
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Orders
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPurchaseOrdersListClientList'
          description: ''
  /api/products/:
    get:
      operationId: api_products_list
      description: "Lista todos os produtos cadastrados. É possivel realizar\n   \
        \ filtros na listagem por id, name e categoria do produto. Não é preciso \n\
        \    está logado para acessar a rota.\n    "
      parameters:
      - in: query
        name: category
        schema:
          type: string
        description: Categoria do produto
      - in: query
        name: id
        schema:
          type: string
          format: uuid
        description: Id do produto
      - in: query
        name: name
        schema:
          type: string
        description: Nome do produto
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
    post:
      operationId: api_products_create
      description: "Cadastra um produto, sendo permitido apenas \n    para usuários\
        \ seller e admin.\n    "
      tags:
      - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/products/{id}/:
    patch:
      operationId: api_products_partial_update
      description: "Atualiza o estoque do produto, a partir do id do produto,\n  \
        \  informado no parâmetro da rota. Só é possível atualizar o estoque do produto\n\
        \    pelo vendedor que cadastrou o produto, ou por um usuário admin.\n    "
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: "Utiliza do token de atualização, para gerar um novo token \n \
        \   de acesso."
      tags:
      - Autenticação
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/:
    post:
      operationId: api_users_create
      description: "Cria um usuário, podendo ser admin, \n     seller ou client."
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{id}/:
    get:
      operationId: api_users_retrieve
      description: "Listar informações do usuário, a partir do id\n    informado no\
        \ parâmetro da rota. O usuário logado precisa ser \n    admin ou dono das\
        \ informações."
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_users_partial_update
      description: "Atualizar as informações do usuário, a partir do id\n    informado\
        \ no parâmetro da rota. O usuário logado precisa ser \n    admin ou dono das\
        \ informações."
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/profile/:
    get:
      operationId: api_users_profile_list
      description: Listar informações do usuário logado.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        country:
          type: string
          maxLength: 30
        state:
          type: string
          maxLength: 30
        city:
          type: string
          maxLength: 50
        district:
          type: string
          maxLength: 30
        street:
          type: string
          maxLength: 50
        number:
          type: string
          maxLength: 10
        cep:
          type: string
          pattern: ^\d{5}-\d{3}$
          maxLength: 9
        complement:
          type: string
          nullable: true
          maxLength: 100
        updated_at:
          type: string
          format: date-time
          readOnly: true
        user_id:
          type: string
          format: uuid
          readOnly: true
      required:
      - cep
      - city
      - country
      - district
      - id
      - number
      - state
      - street
      - updated_at
      - user_id
    CartListProducts:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        cart_id:
          type: string
          format: uuid
          readOnly: true
        product_id:
          type: string
          format: uuid
      required:
      - cart_id
      - id
      - product_id
      - quantity
    CartRetrieve:
      type: object
      properties:
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        total_product:
          type: number
          format: float
          readOnly: true
        product:
          $ref: '#/components/schemas/ProductCartList'
      required:
      - product
      - quantity
      - total_product
    CategoryEnum:
      enum:
      - Eletronics
      - Clothing
      - Shoes
      - Toys
      - Sports
      - Health
      - School
      - Books
      - Crafts
      - Home
      - Beauty
      - Garden
      - Grocery
      - Others
      type: string
      description: |-
        * `Eletronics` - Eletronics
        * `Clothing` - Clothing
        * `Shoes` - Shoes
        * `Toys` - Toys
        * `Sports` - Sports
        * `Health` - Health
        * `School` - School
        * `Books` - Books
        * `Crafts` - Crafts
        * `Home` - Home
        * `Beauty` - Beauty
        * `Garden` - Garden
        * `Grocery` - Grocery
        * `Others` - Others
    CustomJWT:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
    PaginatedCartRetrieveList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CartRetrieve'
    PaginatedProductList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PaginatedPurchaseOrdersListClientList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrdersListClient'
    PaginatedUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedAddress:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        country:
          type: string
          maxLength: 30
        state:
          type: string
          maxLength: 30
        city:
          type: string
          maxLength: 50
        district:
          type: string
          maxLength: 30
        street:
          type: string
          maxLength: 50
        number:
          type: string
          maxLength: 10
        cep:
          type: string
          pattern: ^\d{5}-\d{3}$
          maxLength: 9
        complement:
          type: string
          nullable: true
          maxLength: 100
        updated_at:
          type: string
          format: date-time
          readOnly: true
        user_id:
          type: string
          format: uuid
          readOnly: true
    PatchedProduct:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        quantity_stock:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        is_available_for_sale:
          type: boolean
          readOnly: true
        brand:
          type: string
          nullable: true
          maxLength: 50
        category:
          $ref: '#/components/schemas/CategoryEnum'
        seller_id:
          type: string
          format: uuid
          readOnly: true
    PatchedPurchaseOrdersUpdate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        quantity_items:
          type: integer
          readOnly: true
        user_id:
          type: string
          format: uuid
          readOnly: true
        seller_id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 100
        username:
          type: string
        password:
          type: string
          writeOnly: true
          pattern: ^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$
          maxLength: 128
          minLength: 8
        email:
          type: string
          format: email
        cpf:
          type: string
          pattern: ^\d{3}\.\d{3}\.\d{3}-\d{2}$
          maxLength: 14
        bio:
          type: string
          nullable: true
        birthdate:
          type: string
          format: date
          nullable: true
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        is_seller:
          type: boolean
          nullable: true
        is_client:
          type: boolean
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        cart_id:
          type: string
          format: uuid
          readOnly: true
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          readOnly: true
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        quantity_stock:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        is_available_for_sale:
          type: boolean
          readOnly: true
        brand:
          type: string
          nullable: true
          maxLength: 50
        category:
          $ref: '#/components/schemas/CategoryEnum'
        seller_id:
          type: string
          format: uuid
          readOnly: true
      required:
      - category
      - id
      - is_available_for_sale
      - name
      - price
      - quantity_stock
      - seller_id
    ProductCartList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        brand:
          type: string
          nullable: true
          maxLength: 50
        category:
          $ref: '#/components/schemas/CategoryEnum'
        seller_id:
          type: string
          format: uuid
          readOnly: true
      required:
      - id
      - name
      - price
      - seller_id
    ProductOrderList:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        brand:
          type: string
          nullable: true
        seller_id:
          type: string
          format: uuid
        product_quantity:
          type: integer
      required:
      - brand
      - description
      - id
      - name
      - price
      - product_quantity
      - seller_id
    PurchaseOrdersCreate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        quantity_items:
          type: integer
          readOnly: true
        user_id:
          type: string
          format: uuid
          readOnly: true
        seller_id:
          type: string
          format: uuid
          readOnly: true
        orders:
          allOf:
          - $ref: '#/components/schemas/PurchaseOrdersListClient'
          readOnly: true
      required:
      - id
      - orders
      - price
      - quantity_items
      - seller_id
      - user_id
    PurchaseOrdersListClient:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        quantity_items:
          type: integer
          readOnly: true
        user_id:
          type: string
          format: uuid
          readOnly: true
        seller_id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        products:
          allOf:
          - $ref: '#/components/schemas/ProductOrderList'
          readOnly: true
      required:
      - created_at
      - id
      - price
      - products
      - quantity_items
      - seller_id
      - updated_at
      - user_id
    PurchaseOrdersUpdate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        quantity_items:
          type: integer
          readOnly: true
        user_id:
          type: string
          format: uuid
          readOnly: true
        seller_id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - price
      - quantity_items
      - seller_id
      - status
      - updated_at
      - user_id
    StatusEnum:
      enum:
      - Em Andamento
      - Pedido Realizado
      - Entregue
      type: string
      description: |-
        * `Em Andamento` - Default
        * `Pedido Realizado` - Acoomplished
        * `Entregue` - Delivered
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 100
        username:
          type: string
        password:
          type: string
          writeOnly: true
          pattern: ^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$
          maxLength: 128
          minLength: 8
        email:
          type: string
          format: email
        cpf:
          type: string
          pattern: ^\d{3}\.\d{3}\.\d{3}-\d{2}$
          maxLength: 14
        bio:
          type: string
          nullable: true
        birthdate:
          type: string
          format: date
          nullable: true
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        is_seller:
          type: boolean
          nullable: true
        is_client:
          type: boolean
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        cart_id:
          type: string
          format: uuid
          readOnly: true
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          readOnly: true
      required:
      - address
      - cart_id
      - cpf
      - created_at
      - email
      - first_name
      - id
      - last_name
      - password
      - updated_at
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
